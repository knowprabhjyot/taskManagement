{"version":3,"sources":["webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/modules/material/material.module.ts","webpack:///src/environments/environment.ts","webpack:///src/app/components/authentication/signup/signup.component.ts","webpack:///src/app/components/authentication/signup/signup.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/task/task.component.ts","webpack:///src/app/components/task/task.component.html","webpack:///src/app/modules/material/routes/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/components/authentication/login/login.component.ts","webpack:///src/app/components/authentication/login/login.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/authentication/authentication.component.ts","webpack:///src/app/components/authentication/authentication.component.html","webpack:///src/app/components/add-task/add-task.component.ts","webpack:///src/app/components/add-task/add-task.component.html","webpack:///src/app/services/task.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/auth.guard.ts","webpack:///src/app/components/add-user/add-user.component.ts","webpack:///src/app/components/add-user/add-user.component.html","webpack:///src/app/components/user/user.component.ts","webpack:///src/app/components/user/user.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["HeaderComponent","authService","router","snackBar","taskService","user","subscribe","response","console","log","logout","navigateByUrl","open","duration","selector","templateUrl","styleUrls","MaterialModule","declarations","imports","exports","environment","production","SignupComponent","hide","signupFormGroup","name","required","email","password","valid","value","signUp","taskList","getTaskListBasedOnUser","taskListSubject","next","HomeComponent","dialog","userService","userList","userValue","isAdmin","getUserList","getTaskList","taskSubscription","unsubscribe","userSubscription","index","findIndex","splice","dialogRef","width","afterClosed","result","TaskComponent","isEditable","tempData","task","createTaskFormGroup","title","description","updateTask","status","message","deleteTask","id","routes","path","component","canActivate","AppRoutingModule","forRoot","relativeLinkResolution","AppComponent","getUserListFromStorage","admin","find","newAdmin","Math","random","push","setUserListToLocalStorage","LoginComponent","loginFormGroup","login","AppModule","providers","bootstrap","AuthenticationComponent","AddTaskComponent","userId","createTask","closeDialog","close","TaskService","taskFromStorage","asObservable","JSON","parse","localStorage","getItem","filter","taskValue","xyz","data","updatedTask","setItem","stringify","providedIn","AuthService","userSubject","getUSerFromLocalStorage","getUserListFromLocalStorage","removeItem","setUserToLocalStorage","UserService","userFromStorage","userListSubject","updatedUser","AuthGuard","AddUserComponent","addUserFormGroup","createUser","UserComponent","createUserFormGroup","updateUser","deleteUser","bootstrapModule","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { User } from 'src/app/models/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TaskService } from 'src/app/services/task.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  user: User;\n  constructor(private authService: AuthService,  private router: Router, private snackBar: MatSnackBar, private taskService: TaskService) { }\n\n  ngOnInit(): void {\n    this.authService.user.subscribe((response) => {\n      console.log(response);\n      this.user = response;\n    });\n  }\n\n  public logout(): void {\n    this.authService.logout();\n    this.router.navigateByUrl('/login');\n    this.snackBar.open('Successfully Logged Out', null, {duration: 2000});\n    this.user = null;\n  }\n\n}\n","<mat-toolbar color=\"primary\" *ngIf=\"user\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <h3>Hello {{user.name}}</h3>\n    <button class=\"menu-button color-primary\" mat-raised-button color=\"accent\" (click)=\"logout()\">Logout</button>    \n</mat-toolbar>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule}  from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatIconModule,\n    MatDialogModule\n  ],\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatIconModule,\n    MatDialogModule\n  ]\n})\nexport class MaterialModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TaskService } from 'src/app/services/task.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  signupFormGroup: FormGroup; \n  public hide = true;\n  constructor(private authService: AuthService, private router: Router, private taskService: TaskService) { }\n\n  ngOnInit(): void {\n    this.signupFormGroup = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required),\n    })\n  }\n\n  public signUp(): void {\n    if (this.signupFormGroup.valid) {\n      const user = this.signupFormGroup.value;\n      this.authService.signUp(user);\n      const taskList = this.taskService.getTaskListBasedOnUser();\n      this.taskService.taskListSubject.next(taskList);\n      this.router.navigateByUrl('');\n    }\n  }\n\n}\n","<div class=\"login-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card class=\"login-card\">\n        <mat-card-header class=\"card-header bg-primary\">\n            <div>\n                <h1>Hey, Welcome. Signup to access Task Management</h1>\n            </div>\n        </mat-card-header>\n        <form [formGroup]=\"signupFormGroup\" (ngSubmit)=\"signUp()\">\n            <mat-card-content>\n                <div fxLayout=\"column\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Name</mat-label>\n                        <input required formControlName=\"name\" matInput placeholder=\"Enter your Name here\">\n                        <mat-error *ngIf=\"signupFormGroup.controls['name'].hasError('required')\">\n                            Name is <strong>required</strong>\n                        </mat-error>\n                    <mat-icon color=\"primary\" matPrefix>account_circle</mat-icon>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Email</mat-label>\n                        <input required formControlName=\"email\" matInput placeholder=\"Enter your Email here\">\n                        <mat-error *ngIf=\"signupFormGroup.controls['email'].hasError('required')\">\n                            Email is <strong>required</strong>\n                        </mat-error>\n                        <mat-error\n                            *ngIf=\"signupFormGroup.controls['email'].hasError && !signupFormGroup.controls['email'].hasError('required')\">\n                            Please enter a valid email address\n                        </mat-error>\n                        <mat-icon color=\"primary\" matPrefix>email</mat-icon>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Password</mat-label>\n                        <input required formControlName=\"password\" matInput placeholder=\"Enter your password\"\n                            [type]=\"hide ? 'password' : 'text'\">\n                        <mat-error *ngIf=\"signupFormGroup.controls['password'].hasError('required')\">\n                            Password is <strong>required</strong>\n                        </mat-error>\n                        <mat-icon color=\"primary\" matPrefix>lock</mat-icon>\n                        <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\n                    </mat-form-field>\n                </div>\n            </mat-card-content>\n            <mat-card-actions fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n                <button mat-raised-button color=\"primary\">Signup</button>\n                <span>Already a Member! <a routerLink=\"/login\">Login</a></span>\n            </mat-card-actions>\n        </form>\n    </mat-card>\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { Task } from 'src/app/models/task';\nimport { User } from 'src/app/models/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TaskService } from 'src/app/services/task.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { AddTaskComponent } from '../add-task/add-task.component';\nimport { AddUserComponent } from '../add-user/add-user.component';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n  \n})\nexport class HomeComponent implements OnInit, OnDestroy {\n  public taskList: Task[] = [];\n  public userList: User[] = [];\n  public taskSubscription: Subscription;\n  public userSubscription: Subscription;\n  public user: User;\n  constructor(private taskService: TaskService, private dialog: MatDialog, private authService: AuthService,\n              private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.user = this.authService.userValue;\n    if (this.user.isAdmin) {\n      this.getUserList();\n    } else {\n      this.getTaskList();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.taskSubscription) {\n      this.taskSubscription.unsubscribe();\n      this.taskList = [];\n    }\n  }\n\n  public getTaskList(): void {\n    this.taskSubscription = this.taskService.taskList.subscribe((response) => {\n      this.taskList = response;\n      console.log(this.taskList);\n    })\n  }\n\n  public getUserList(): void {\n    this.userSubscription = this.userService.userList.subscribe((response) => {\n      this.userList = response;\n      const index = this.userList.findIndex((user) => user.isAdmin === true);\n      this.userList.splice(index, 1);\n    })\n  }\n\n\n  public createTask(): void {\n    const dialogRef = this.dialog.open(AddTaskComponent, {\n      width: '500px'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  public addUser(): void {\n    const dialogRef = this.dialog.open(AddUserComponent, {\n      width: '500'\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"full-height\" fxLayout=\"row wrap\" fxLayoutGap=\"16px\" fxLayoutAlign.xs=\"center flex-start\" fxLayoutAlign=\"flex-start flex-start\">\n        <div fxFlex=\"20\" fxFlex.xs=\"0 1 calc(100% - 32px)\" fxFlex=\"0 1 calc(25% - 32px)\" fxFlex.sm=\"0 1 calc(50% - 32px)\" fxFlex.lt-md=\"0 1 calc(33.3% - 32px)\"\n            class=\"task\" *ngFor=\"let task of taskList\">\n            <app-task [task]=\"task\"></app-task>\n        </div>\n        <div fxFlex=\"20\" fxFlex=\"0 1 calc(25% - 32px)\" fxFlex.lt-md=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-sm=\"0 1 calc(100% - 32px)\"\n        class=\"task\" *ngFor=\"let user of userList\">\n        <app-user [user]=\"user\"></app-user>\n        </div>\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"full-height\" *ngIf=\"(user && !user.isAdmin) && (!taskList || taskList.length === 0)\">\n            <span>No Tasks Added Yet</span>\n        </div>\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"full-height\" *ngIf=\"user && user.isAdmin && (!userList || userList.length === 0)\">\n            <span>No Users Added Yet</span>\n        </div>\n    </div>\n</div>\n<button class=\"add-button\" *ngIf=\"!user.isAdmin\" mat-fab color=\"primary\" (click)=\"createTask()\" aria-label=\"Add Task\">\n    <mat-icon>add</mat-icon>\n</button>\n\n<button class=\"add-button\" *ngIf=\"user.isAdmin\" mat-fab color=\"primary\" (click)=\"addUser()\" aria-label=\"Add Task\">\n    <mat-icon>add</mat-icon>\n</button>","import { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TaskService } from 'src/app/services/task.service';\nimport { Task } from '../../models/task';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n  @Input() public task: Task;\n  public createTaskFormGroup: FormGroup;\n  public isEditable: boolean = false;\n  public tempData;\n  constructor(private dialog: MatDialog, private taskService: TaskService, private snackBar: MatSnackBar, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.tempData = {...this.task};\n    this.createTaskFormGroup = new FormGroup({\n      title: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n    })\n  }\n\n  public editTask(): void {\n    this.isEditable = true; \n  }\n\n  public cancel(): void {\n    this.isEditable = false;\n    this.task = this.tempData;\n  }\n\n  public updateTask(): void {\n    const response = this.taskService.updateTask(this.task);\n    if (response.status === 201) {\n      this.isEditable = false;\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    } else {\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n  }\n\n  public deleteTask(): void {\n    const response = this.taskService.deleteTask(this.task.id);\n    if (response.status === 200) {\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n  }\n}\n","<mat-card> \n    <form class=\"full-width full-height\" [formGroup]=\"createTaskFormGroup\" (ngSubmit)=\"updateTask()\">\n        <div *ngIf=\"!isEditable\" fxLayout=\"row\" fxLayoutAlign=\"flex-end\" fxLayoutGap=\"8px\">\n            <button mat-mini-fab class=\"fab-icon\" (click)=\"editTask()\">\n                <mat-icon>edit</mat-icon>\n            </button>\n            <button mat-mini-fab color=\"warn\" class=\"fab-icon\" (click)=\"deleteTask()\">\n                <mat-icon>delete</mat-icon>\n            </button>\n        </div>\n        <span *ngIf=\"!isEditable\"><h2>{{task.title}}</h2></span>\n        <mat-form-field *ngIf=\"isEditable\" class=\"full-width\" appearance=\"outline\">\n            <mat-label>Title</mat-label>\n            <input [(ngModel)]=\"task.title\" required formControlName=\"title\" matInput placeholder=\"Enter Task Title here\">\n            <mat-error *ngIf=\"createTaskFormGroup.controls['title'].hasError('required')\">\n                Title is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n      <div fxLayout=\"column\" fxLayoutAlign=\"space-between space-between\" class=\"full-height\">\n        <div>\n            <span *ngIf=\"!isEditable\">\n                {{task.description}}\n            </span>\n            <mat-form-field *ngIf=\"isEditable\" class=\"full-width\" appearance=\"outline\">\n                <mat-label>Description</mat-label>\n                <textarea [(ngModel)]=\"task.description\" required formControlName=\"description\" matInput\n                    placeholder=\"Enter Task Description here\"></textarea>\n                <mat-error *ngIf=\"createTaskFormGroup.controls['description'].hasError('required')\">\n                    Description is <strong>required</strong>\n                </mat-error>\n            </mat-form-field>\n        </div>\n        <div>\n            <!-- <div fxLayout=\"row\" fxLayoutGap=\"8px\" >\n                <button color=\"accent\" fxFlex=\"50\" *ngIf=\"!isEditable\" mat-raised-button (click)=\"editTask()\">Edit</button>\n                <button color=\"warn\" fxFlex=\"50\" *ngIf=\"!isEditable\" mat-raised-button (click)=\"deleteTask()\">Delete</button>\n            </div> -->\n            <div *ngIf=\"isEditable\" fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n                <button type=\"submit\" [disabled]=\"createTaskFormGroup.invalid || !this.createTaskFormGroup.dirty\" mat-raised-button color=\"primary\">Update</button>\n                <button (click)=\"cancel()\" mat-raised-button color=\"warn\">Cancel</button>\n            </div>\n        </div>\n      </div>\n    </form>\n</mat-card>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from 'src/app/auth.guard';\nimport { LoginComponent } from '../../../components/authentication/login/login.component';\nimport { SignupComponent } from '../../../components/authentication/signup/signup.component';\nimport { HomeComponent } from '../../../components/home/home.component';\n\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent, canActivate: [AuthGuard] },\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { User } from './models/user';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(private authService: AuthService) {\n    let userList = this.authService.getUserListFromStorage();\n    const admin = userList.find((user) => user.isAdmin === true);\n    if (!admin) {\n      const newAdmin: User = {\n        id: Math.random(),\n        name: 'Admin',\n        password: '1234',\n        isAdmin: true,\n        email: 'admin@gmail.com'\n      }\n      userList.push(newAdmin);\n      this.authService.setUserListToLocalStorage(userList);\n    }\n  }\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TaskService } from 'src/app/services/task.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginFormGroup: FormGroup; \n  public hide = true;\n  constructor(private authService: AuthService, private router: Router, private snackBar: MatSnackBar, private taskService: TaskService) { }\n  \n  ngOnInit(): void {\n    this.loginFormGroup = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required),\n    })\n  }\n\n  public login(): void {\n    if (this.loginFormGroup.valid) {\n      const response = this.authService.login(this.loginFormGroup.value.email, this.loginFormGroup.value.password);\n      console.log(response, 'RESPONSE');\n      if (response.status === 201) {\n        this.router.navigateByUrl('');\n        const taskList = this.taskService.getTaskListBasedOnUser();\n        console.log(taskList, 'NEW TASK LIST');\n        this.taskService.taskListSubject.next(taskList);\n      }\n      this.snackBar.open(response.message, null, {duration: 2000});\n    }\n  }\n}\n","<div class=\"login-container\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card class=\"login-card\">\n        <mat-card-header class=\"card-header bg-primary\">\n            <div>\n                <h1>Hey, Welcome. Login to access Task Management</h1>\n            </div>\n        </mat-card-header>\n        <form [formGroup]=\"loginFormGroup\" (ngSubmit)=\"login()\">\n            <mat-card-content>\n                <div fxLayout=\"column\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Email</mat-label>\n                        <mat-icon color=\"primary\" matPrefix>email</mat-icon>\n                        <input required formControlName=\"email\" matInput placeholder=\"Enter your Email here\">\n                        <mat-error *ngIf=\"loginFormGroup.controls['email'].hasError('required')\">\n                            Email is <strong>required</strong>\n                        </mat-error>\n                        <mat-error *ngIf=\"loginFormGroup.controls['email'].hasError && !loginFormGroup.controls['email'].hasError('required')\">\n                            Please enter a valid email address\n                          </mat-error>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Password</mat-label>\n                        <mat-icon color=\"primary\" matPrefix>lock</mat-icon>\n                        <input required formControlName=\"password\" matInput placeholder=\"Enter your password\" [type]=\"hide ? 'password' : 'text'\">\n                        <mat-icon color=\"primary\" matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\n                        <mat-error *ngIf=\"loginFormGroup.controls['password'].hasError('required')\">\n                            Password is <strong>required</strong>\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </mat-card-content>\n            <mat-card-actions fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n                <button mat-raised-button color=\"primary\">Login</button>\n                <span>Not a Member yet ? <a routerLink=\"/signup\">Sign up</a></span>\n            </mat-card-actions>\n        </form>\n    </mat-card>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './modules/material/routes/app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './components/header/header.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { MaterialModule } from './modules/material/material.module';\nimport { AuthenticationComponent } from './components/authentication/authentication.component';\nimport { SignupComponent } from './components/authentication/signup/signup.component';\nimport { LoginComponent } from './components/authentication/login/login.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TaskComponent } from './components/task/task.component';\nimport { AddTaskComponent } from './components/add-task/add-task.component';\nimport { AddUserComponent } from './components/add-user/add-user.component';\nimport { UserComponent } from './components/user/user.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    HomeComponent,\n    AuthenticationComponent,\n    SignupComponent,\n    LoginComponent,\n    TaskComponent,\n    AddTaskComponent,\n    AddUserComponent,\n    UserComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-authentication',\n  templateUrl: './authentication.component.html',\n  styleUrls: ['./authentication.component.scss']\n})\nexport class AuthenticationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>authentication works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TaskService } from 'src/app/services/task.service';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-add-task',\n  templateUrl: './add-task.component.html',\n  styleUrls: ['./add-task.component.scss']\n})\nexport class AddTaskComponent implements OnInit {\n  createTaskFormGroup: FormGroup;\n  public hide = true;\n  constructor(private taskService: TaskService, private router: Router, private snackBar: MatSnackBar,\n              private authService: AuthService, private dialogRef: MatDialogRef<AddTaskComponent>) { }\n\n  ngOnInit(): void {\n    this.createTaskFormGroup = new FormGroup({\n      title: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n    })\n  }\n\n  public createTask(): void {\n    let task = this.createTaskFormGroup.value;\n    const user = this.authService.userValue;\n    task.userId = user.id;\n    const response = this.taskService.createTask(task);\n    if (response.status === 201) {\n      this.router.navigateByUrl('');\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    } else {\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n    this.closeDialog();\n  }\n\n  public closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div class=\"login-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <div class=\"full-width\">\n        <div class=\"full-width\" fxLayout=\"row\" fxLayoutAlign=\"flex-end\">\n            <button color=\"primary\" mat-mini-fab (click)=\"closeDialog()\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n        <div>\n            <h1>Hey, You can Add your Task Here</h1>\n        </div>\n    </div>\n    <form class=\"full-width\" [formGroup]=\"createTaskFormGroup\" (ngSubmit)=\"createTask()\">\n        <div fxLayout=\"column\">\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\n                <mat-label>Title</mat-label>\n                <input autofocus required formControlName=\"title\" matInput placeholder=\"Enter Task Title here\">\n                <mat-error *ngIf=\"createTaskFormGroup.controls['title'].hasError('required')\">\n                    Title is <strong>required</strong>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\n                <mat-label>Description</mat-label>\n                <textarea required formControlName=\"description\" matInput\n                    placeholder=\"Enter Task Description here\"></textarea>\n                <mat-error *ngIf=\"createTaskFormGroup.controls['description'].hasError('required')\">\n                    Description is <strong>required</strong>\n                </mat-error>\n            </mat-form-field>\n\n        </div>\n        <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n            <button class=\"create-button\" [disabled]=\"createTaskFormGroup.invalid\" mat-raised-button color=\"primary\">Create</button>\n        </div>\n    </form>\n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Task } from '../models/task';\nimport { User } from '../models/user';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  public taskList: Observable<Task[]>;\n  public taskListSubject: BehaviorSubject<Task[]>;\n  public user: User;\n  constructor(private authService: AuthService) {\n    this.authService.user.subscribe((user) => {\n      this.user = user;\n    })\n    let taskFromStorage = this.getTaskListBasedOnUser();\n    this.taskListSubject = new BehaviorSubject<Task[]>(taskFromStorage);\n    this.taskList = this.taskListSubject.asObservable();\n  }\n\n  public getTaskListBasedOnUser(): Task[] {\n    let taskList = JSON.parse(localStorage.getItem('taskList'));\n    if (taskList && this.user) {\n      taskList = taskList.filter((task) => task.userId === this.user.id);\n    } else {\n      taskList = [];\n    }\n    return taskList;\n  }\n   \n  public set taskValue(taskList) {\n    localStorage.setItem('taskList', JSON.stringify(taskList));\n    this.taskListSubject.next(taskList);\n  }\n\n  public createTask(task: Task) {\n    let taskList =  localStorage.getItem('taskList') ? JSON.parse(localStorage.getItem('taskList')) : null;\n    task.id = Math.random();\n    task.userId = this.user.id;\n    if (taskList) {\n      taskList.push(task);\n    } else {\n      taskList = [task];\n    }\n    this.taskValue = taskList;\n    let xyz = taskList.filter((task) => task.userId === this.user.id);\n    this.taskListSubject.next(xyz);\n    return {\n      status: 201,\n      message: 'Task Added Succesfully',\n      data: task\n    }\n  }\n\n  public updateTask(updatedTask: Task) {\n    let taskList = this.getTaskList();\n    const index = taskList.findIndex((task) => task.id === updatedTask.id);\n    taskList[index] = updatedTask;\n    let xyz = taskList.filter((task) => task.userId === this.user.id);\n    this.taskListSubject.next(xyz);\n    return {\n      status: 201,\n      message: 'Task Updated Successfully'\n    }\n  }\n\n  public getTaskList(): Task[] {\n    let taskList =  localStorage.getItem('taskList') ? JSON.parse(localStorage.getItem('taskList')) : null;\n    if (!taskList) {\n      return []; \n    }\n    return taskList;\n  }\n\n  public deleteTask(id: number) {\n    let taskList = this.getTaskListBasedOnUser();\n    let index = taskList.findIndex((task) => task.id === id);\n    taskList.splice(index,1);\n    this.taskValue = taskList;\n    return {\n      status: 200,\n      message: 'Successfully deleted Task'\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public user: Observable<User>;\n  public userSubject: BehaviorSubject<User>;\n\n  constructor() { \n    this.userSubject = new BehaviorSubject<User>(this.getUSerFromLocalStorage());\n    this.user = this.userSubject.asObservable();\n  }\n\n  public get userValue(): User {\n    return this.userSubject.value;\n  }\n\n  public getUSerFromLocalStorage(): User {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  public setUserToLocalStorage(user: User): void {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  public getUserListFromLocalStorage(): User[] {\n    return JSON.parse(localStorage.getItem('userList'));\n  }\n\n  public setUserListToLocalStorage(userList: User[]): void {\n    localStorage.setItem('userList', JSON.stringify(userList));\n  }\n\n  public set userValue(user) {\n    this.setUserToLocalStorage(user);\n    this.userSubject.next(user);\n  }\n\n  public getUserListFromStorage(): User[] {\n    let userList = this.getUserListFromLocalStorage();\n    if (!userList) {\n      userList = [];\n    }\n    return userList;\n  }\n\n  public login(email: string, password: string) {\n    const userList = this.getUserListFromStorage();\n    const user = userList.find((user) => user.email === email && user.password === password);\n      if (!user) {\n        return {\n          status: 500,\n          message: 'Email or Password is incorrect'\n        };\n      }\n  \n      this.userValue = user;\n      return {\n        status: 201,\n        message: 'Logged in Successfully',\n        data: user\n      };\n  }\n\n  public signUp(user: User) {\n    let userList =  this.getUserListFromStorage();\n    user.id = Math.random();\n    user.isAdmin = false;\n    userList.push(user);\n    this.userValue = user;\n    localStorage.setItem('userList', JSON.stringify(userList));\n  }\n\n  public logout(): void {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n    this.user = null;\n    this.userSubject.next(null);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../models/user';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  public userList: Observable<User[]>;\n  public userListSubject: BehaviorSubject<User[]>;\n  constructor(private authService: AuthService) {\n    let userFromStorage = this.getUserListFromStorage();\n    this.userListSubject = new BehaviorSubject<User[]>(userFromStorage);\n    this.userList = this.userListSubject.asObservable();\n   }\n\n  public createUser(user: User) {\n    let userList =  this.authService.getUserListFromStorage();\n    user.id = Math.random();\n    user.isAdmin = false;\n    userList.push(user);\n    this.authService.setUserListToLocalStorage(userList);\n    this.userListSubject.next(userList);\n    return {\n      status: 201,\n      message: 'User Added Succesfully',\n      data: user\n    }\n  }\n\n  public getUserListFromStorage(): User[] {\n    let userList =  localStorage.getItem('userList') ? JSON.parse(localStorage.getItem('userList')) : [];\n    return userList;\n  }\n\n  public updateUser(updatedUser: User) {\n    let userList = this.getUserListFromStorage();\n    const index = userList.findIndex((user) => user.id === updatedUser.id);\n    userList[index] = updatedUser;\n    this.userListSubject.next(userList);\n    this.authService.setUserListToLocalStorage(userList);\n    return {\n      status: 201,\n      message: 'User Updated Successfully'\n    }\n  }\n\n  public deleteUser(id: number) {\n    let userList = this.getUserListFromStorage();\n    let index = userList.findIndex((user) => user.id === id);\n    userList.splice(index,1);\n    this.userListSubject.next(userList);\n    this.authService.setUserListToLocalStorage(userList);\n    return {\n      status: 200,\n      message: 'Successfully deleted User'\n    }\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = this.authService.userValue;\n    if (user) {\n      return true;\n    }\n\n    this.router.navigateByUrl('login');\n    return false;\n  }\n  \n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.scss']\n})\nexport class AddUserComponent implements OnInit {\n  addUserFormGroup: FormGroup;\n  public hide = true;\n  constructor(private router: Router, private snackBar: MatSnackBar,\n              private authService: AuthService, private dialogRef: MatDialogRef<AddUserComponent>,\n              private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.addUserFormGroup = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    })\n  }\n\n  public createUser(): void {\n    let user = this.addUserFormGroup.value;\n    const response = this.userService.createUser(user);\n    if (response.status === 201) {\n      this.router.navigateByUrl('');\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n    this.closeDialog();\n  }\n\n  public closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<div class=\"login-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n    <div class=\"full-width\" fxLayout=\"row\" fxLayoutAlign=\"flex-end\">\n        <button class=\"close\" mat-icon-button (click)=\"closeDialog()\">\n            <mat-icon>close</mat-icon>\n        </button>\n    </div>\n    <div>\n        <h1>Hey, You can Add a User Here</h1>\n    </div>\n    <form class=\"full-width\" [formGroup]=\"addUserFormGroup\" (ngSubmit)=\"createUser()\">\n        <div fxLayout=\"column\">\n            <mat-form-field class=\"full-width\" appearance=\"outline\">\n                <mat-icon color=\"primary\" matPrefix class=\"mat-icon-pre\">account_circle</mat-icon>\n                <mat-label>Name</mat-label>\n                <input required formControlName=\"name\" matInput placeholder=\"Enter User's name here\">\n                <mat-error *ngIf=\"addUserFormGroup.controls['name'].hasError('required')\">\n                    name is <strong>required</strong>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Email</mat-label>\n                <input required formControlName=\"email\" matInput placeholder=\"Enter User's Email here\">\n                <mat-error *ngIf=\"addUserFormGroup.controls['email'].hasError('required')\">\n                    Email is <strong>required</strong>\n                </mat-error>\n                <mat-error\n                    *ngIf=\"addUserFormGroup.controls['email'].hasError && !addUserFormGroup.controls['email'].hasError('required')\">\n                    Please enter a valid email address\n                </mat-error>\n                <mat-icon color=\"primary\" matPrefix class=\"mat-icon-pre\">email</mat-icon>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Password</mat-label>\n                <input required formControlName=\"password\" matInput placeholder=\"Enter User's password\"\n                    [type]=\"hide ? 'password' : 'text'\">\n                <mat-error *ngIf=\"addUserFormGroup.controls['password'].hasError('required')\">\n                    Password is <strong>required</strong>\n                </mat-error>\n                <mat-icon color=\"primary\" matPrefix class=\"mat-icon-pre\">lock</mat-icon>\n                <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility' : 'visibility_off'}}</mat-icon>\n            </mat-form-field>\n\n        </div>\n        <div fxLayout=\"column\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n            <button class=\"create-button\" [disabled]=\"addUserFormGroup.invalid\" mat-raised-button color=\"primary\">Create</button>\n        </div>\n    </form>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { User } from 'src/app/models/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n  @Input() public user: User;\n  public createUserFormGroup: FormGroup;\n  public isEditable: boolean = false;\n  public tempData;\n  constructor(private userService: UserService, private snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.tempData = {...this.user};\n    this.createUserFormGroup = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email])\n    })\n  }\n\n  public editUser(): void {\n    this.isEditable = true; \n  }\n\n  public cancel(): void {\n    this.isEditable = false;\n    this.user = this.tempData;\n  }\n\n  public updateUser(): void {\n    const response = this.userService.updateUser(this.user);\n    if (response.status === 201) {\n      this.isEditable = false;\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    } else {\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n  }\n\n  public deleteUser(): void {\n    const response = this.userService.deleteUser(this.user.id);\n    if (response.status === 200) {\n      this.snackBar.open(response.message, null, { duration: 2000 });\n    }\n  }\n}\n","<mat-card>\n    <form class=\"full-width full-height\" [formGroup]=\"createUserFormGroup\" (ngSubmit)=\"updateUser()\">\n        <div *ngIf=\"!isEditable\" fxLayout=\"row\" fxLayoutAlign=\"flex-end\" fxLayoutGap=\"8px\">\n            <button mat-mini-fab class=\"fab-icon\" (click)=\"editUser()\">\n                <mat-icon>edit</mat-icon>\n            </button>\n            <button mat-mini-fab color=\"warn\" class=\"fab-icon\" (click)=\"deleteUser()\">\n                <mat-icon>delete</mat-icon>\n            </button>\n        </div>\n        <span *ngIf=\"!isEditable\"> <h2> {{user.name}}</h2> </span>\n        <mat-form-field *ngIf=\"isEditable\" class=\"full-width\" appearance=\"outline\">\n            <mat-label>Name</mat-label>\n            <mat-icon color=\"primary\" matPrefix class=\"mat-icon-pre\">account_circle</mat-icon>\n            <input [(ngModel)]=\"user.name\" required formControlName=\"name\" matInput\n            placeholder=\"Enter User's name here\">\n            <mat-error *ngIf=\"createUserFormGroup.controls['name'].hasError('required')\">\n                Name is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n        <div fxLayout=\"column\" fxLayoutAlign=\"space-between space-between\" class=\"full-height\">\n            <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"flex-start center\" fxLayoutGap=\"8px\">\n                <mat-icon *ngIf=\"!isEditable\" color=\"primary\">email</mat-icon>\n                <span *ngIf=\"!isEditable\">\n                    {{user.email}}\n                </span>\n                <mat-form-field *ngIf=\"isEditable\" class=\"full-width\" appearance=\"outline\">\n                    <mat-label>Email</mat-label>\n                    <input [(ngModel)]=\"user.email\" required formControlName=\"email\" matInput\n                        placeholder=\"Enter your Email here\">\n                    <mat-error *ngIf=\"createUserFormGroup.controls['email'].hasError('required')\">\n                        Email is <strong>required</strong>\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"createUserFormGroup.controls['email'].hasError && !createUserFormGroup.controls['email'].hasError('required')\">\n                        Please enter a valid email address\n                    </mat-error>\n                    <mat-icon color=\"primary\" matPrefix class=\"mat-icon-pre\">email</mat-icon>\n                </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions>\n                <div *ngIf=\"isEditable\" fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayoutAlign=\"center center\">\n                    <button type=\"submit\" [disabled]=\"createUserFormGroup.invalid || !this.createUserFormGroup.dirty\"\n                        mat-raised-button color=\"primary\">Update</button>\n                    <button (click)=\"cancel()\" mat-raised-button color=\"warn\">Cancel</button>\n                </div>\n            </mat-card-actions>\n        </div>\n    </form>\n</mat-card>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}